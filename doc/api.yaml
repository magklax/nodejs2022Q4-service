openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

sservers:
  - url: http://localhost:4000/

paths:
  "/":
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  "/user":
    post:
      operationId: UsersController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateUserDto"
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserEntity"
      tags:
      - Users
    get:
      operationId: UsersController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserEntity"
      tags:
      - Users
  "/user/{id}":
    get:
      operationId: UsersController_findOne
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserEntity"
      tags:
      - Users
    put:
      operationId: UsersController_update
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdatePasswordDto"
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserEntity"
      tags:
      - Users
    delete:
      operationId: UsersController_remove
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      responses:
        '204':
          description: ''
        default:
          description: The user has been deleted
      tags:
      - Users
  "/track":
    post:
      operationId: TracksController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateTrackDto"
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TrackEntity"
      tags:
      - Tracks
    get:
      operationId: TracksController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/TrackEntity"
      tags:
      - Tracks
  "/track/{id}":
    get:
      operationId: TracksController_findOne
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TrackEntity"
      tags:
      - Tracks
    put:
      operationId: TracksController_update
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateTrackDto"
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TrackEntity"
      tags:
      - Tracks
    delete:
      operationId: TracksController_remove
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      responses:
        '204':
          description: ''
        default:
          description: The track has been deleted
      tags:
      - Tracks
  "/artist":
    post:
      operationId: ArtistsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateArtistDto"
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtistEntity"
      tags:
      - Artists
    get:
      operationId: ArtistsController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ArtistEntity"
      tags:
      - Artists
  "/artist/{id}":
    get:
      operationId: ArtistsController_findOne
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtistEntity"
      tags:
      - Artists
    put:
      operationId: ArtistsController_update
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateArtistDto"
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ArtistEntity"
      tags:
      - Artists
    delete:
      operationId: ArtistsController_remove
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      responses:
        '204':
          description: ''
        default:
          description: The artist has been deleted
      tags:
      - Artists
  "/album":
    post:
      operationId: AlbumsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateAlbumDto"
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AlbumEntity"
      tags:
      - Albums
    get:
      operationId: AlbumsController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AlbumEntity"
      tags:
      - Albums
  "/album/{id}":
    get:
      operationId: AlbumsController_findOne
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AlbumEntity"
      tags:
      - Albums
    put:
      operationId: AlbumsController_update
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateAlbumDto"
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AlbumEntity"
      tags:
      - Albums
    delete:
      operationId: AlbumsController_remove
      parameters:
      - name: id
        required: true
        in: path
        schema:
          format: uuid
          type: string
      responses:
        '204':
          description: ''
        default:
          description: The album has been deleted
      tags:
      - Albums
  "/favs/track/{id}":
    post:
      operationId: FavoritesController_insertTrack
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: string
        default:
          description: Added succesfully
      tags:
      - Favorites
    delete:
      operationId: FavoritesController_removeTrack
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '204':
          description: ''
        default:
          description: Deleted succesfully
      tags:
      - Favorites
  "/favs/album/{id}":
    post:
      operationId: FavoritesController_insertAlbum
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: string
        default:
          description: Added succesfully
      tags:
      - Favorites
    delete:
      operationId: FavoritesController_removeAlbum
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '204':
          description: ''
        default:
          description: Deleted succesfully
      tags:
      - Favorites
  "/favs/artist/{id}":
    post:
      operationId: FavoritesController_insertArtist
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: string
        default:
          description: Added succesfully
      tags:
      - Favorites
    delete:
      operationId: FavoritesController_removeArtist
      parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
      responses:
        '204':
          description: ''
        default:
          description: Deleted succesfully
      tags:
      - Favorites
  "/favs":
    get:
      operationId: FavoritesController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FavoritesRepsonse"
        default:
          description: Successful operation
      tags:
      - Favorites
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: John Doe
        password:
          type: string
          example: P@ssword
      required:
      - login
      - password
    UserEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: John Doe
        version:
          type: number
          example: 1
        createdAt:
          type: number
          example: 1655000000
        updatedAt:
          type: number
          example: 1655000000
        password:
          type: string
      required:
      - id
      - login
      - version
      - createdAt
      - updatedAt
      - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: P@ssword
        newPassword:
          type: string
          example: NewP@ssword
      required:
      - oldPassword
      - newPassword
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          example:
        albumId:
          type: string
          format: uuid
          example:
        duration:
          type: number
          example: 262
          description: In seconds
      required:
      - name
      - artistId
      - albumId
      - duration
    TrackEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          nullable: true
          format: uuid
          example:
        albumId:
          type: string
          nullable: true
          format: uuid
          example:
        duration:
          type: number
          example: 262
          description: In seconds
      required:
      - id
      - name
      - artistId
      - albumId
      - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          example:
        albumId:
          type: string
          format: uuid
          example:
        duration:
          type: number
          example: 262
          description: In seconds
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
      required:
      - name
      - grammy
    ArtistEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
      required:
      - id
      - name
      - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Innuendo
        year:
          type: number
          example: 1991
        artistId:
          type: string
          nullable: true
          format: uuid
          example:
      required:
      - name
      - year
      - artistId
    AlbumEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Innuendo
        year:
          type: number
          example: 1991
        artistId:
          type: string
          nullable: true
          format: uuid
          example:
      required:
      - id
      - name
      - year
      - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Innuendo
        year:
          type: number
          example: 1991
        artistId:
          type: string
          nullable: true
          format: uuid
          example:
    FavoritesRepsonse:
      type: object
      properties:
        artists:
          type: array
          items:
            "$ref": "#/components/schemas/ArtistEntity"
        albums:
          type: array
          items:
            "$ref": "#/components/schemas/AlbumEntity"
        tracks:
          type: array
          items:
            "$ref": "#/components/schemas/TrackEntity"
      required:
      - artists
      - albums
      - tracks
